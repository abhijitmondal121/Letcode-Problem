Given a string s containing just the characters '(', ')', '{', '}', '[' and ']', determine if the input string is valid.

An input string is valid if:

Open brackets must be closed by the same type of brackets.
Open brackets must be closed in the correct order.
 

Example 1:

Input: s = "()"
Output: true
Example 2:

Input: s = "()[]{}"
Output: true
Example 3:

Input: s = "(]"
Output: false
 

Constraints:

1 <= s.length <= 104
s consists of parentheses only '()[]{}'.


**********************************************************************************************************************************

ans:


class Solution {
public:
    bool isValid(string expression) {

          stack<char>s;
    for(int i=0;i<expression.length();i++){
        char ch=expression[i];
        if(ch=='(' || ch=='{' || ch=='['){
            s.push(ch);
        }
        else{
                if(!s.empty()){
                    char top=s.top();
                        if((ch==')' && top=='(')||
                          (ch=='}' && top=='{')||
                          (ch==']' && top=='[')){
                            s.pop();
                        }
                        else{
                            return false;
                        }
                }
                else{
                    return false;
                }
            
        }
    }
            if(s.empty()){
            return true;
        }
        else{
            return false;
        }  
        
    }
};